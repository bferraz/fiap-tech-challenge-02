import requests
import json

def testar_api_limpa():
    print("üß™ Testando API ap√≥s limpeza...")
    
    # Teste 1: Endpoint /configuracao/exemplo
    print("\n1. Testando /configuracao/exemplo...")
    try:
        response = requests.get('http://localhost:8000/configuracao/exemplo')
        if response.status_code == 200:
            config = response.json()
            print("‚úÖ Endpoint funcionando!")
            print(f"   Par√¢metros: {config['parametros']}")
            
            # Teste 2: Endpoint /otimizar
            print("\n2. Testando /otimizar...")
            response = requests.post('http://localhost:8000/otimizar', json=config)
            if response.status_code == 200:
                resultado = response.json()
                print("‚úÖ Otimiza√ß√£o funcionando!")
                print(f"   Viola√ß√µes: {resultado['num_violacoes']}")
                print(f"   Tempo: {resultado['tempo_execucao']:.2f}s")
                print(f"   Gera√ß√µes: {len(resultado['evolucao_fitness'])}")
                
                # Teste 3: Endpoint /validar
                print("\n3. Testando /validar...")
                dados_validacao = {
                    "escala": resultado["escala_otimizada"],
                    "funcionarios": config["funcionarios"]
                }
                response = requests.post('http://localhost:8000/validar', json=dados_validacao)
                if response.status_code == 200:
                    validacao = response.json()
                    print("‚úÖ Valida√ß√£o funcionando!")
                    print(f"   Escala v√°lida: {validacao['escala_valida']}")
                    print(f"   Viola√ß√µes: {validacao['num_violacoes']}")
                else:
                    print(f"‚ùå Erro na valida√ß√£o: {response.status_code}")
            else:
                print(f"‚ùå Erro na otimiza√ß√£o: {response.status_code}")
                print(response.text)
        else:
            print(f"‚ùå Erro no exemplo: {response.status_code}")
    except requests.exceptions.ConnectionError:
        print("‚ùå API n√£o est√° rodando!")
    except Exception as e:
        print(f"‚ùå Erro: {e}")

    print("\nüìä Resumo da API limpa:")
    print("   ‚Ä¢ Endpoints ativos: /otimizar, /validar, /configuracao/exemplo")
    print("   ‚Ä¢ Endpoints removidos: /, /reparar, /funcionarios/exemplo")
    print("   ‚Ä¢ Par√¢metro removido: usar_reparo")
    print("   ‚Ä¢ Fun√ß√£o removida: reparar_individuo")
    print("   ‚Ä¢ Imports removidos: numpy")

if __name__ == "__main__":
    testar_api_limpa()
